type: edu
files:
- name: browser.py
  visible: true
  text: "\nnytimes_com = '''\nThis New Liquid Is Magnetic, and Mesmerizing\n\nScientists\
    \ have created \"soft\" magnets that can flow \nand change shape, and that could\
    \ be a boon to medicine \nand robotics. (Source: New York Times)\n\n\nMost Wikipedia\
    \ Profiles Are of Men. This Scientist Is Changing That.\n\nJessica Wade has added\
    \ nearly 700 Wikipedia biographies for\n important female and minority scientists\
    \ in less than two \n years.\n\n'''\n\nbloomberg_com = '''\nThe Space Race: From\
    \ Apollo 11 to Elon Musk\n\nIt's 50 years since the world was gripped by historic\
    \ images\n of Apollo 11, and Neil Armstrong -- the first man to walk \n on the\
    \ moon. It was the height of the Cold War, and the charts\n were filled with David\
    \ Bowie's Space Oddity, and Creedence's \n Bad Moon Rising. The world is a very\
    \ different place than \n it was 5 decades ago. But how has the space race changed\
    \ since\n the summer of '69? (Source: Bloomberg)\n\n\nTwitter CEO Jack Dorsey\
    \ Gives Talk at Apple Headquarters\n\nTwitter and Square Chief Executive Officer\
    \ Jack Dorsey \n addressed Apple Inc. employees at the iPhone makerâ€™s headquarters\n\
    \ Tuesday, a signal of the strong ties between the Silicon Valley giants.\n'''\n\
    \n# write your code here\n"
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    import requests
    import os
    import shutil
    import sys

    if sys.platform.startswith("win"):
        import _locale

        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    names = {'bloomberg': 'bloomberg.com',
             'docs': 'docs.python.org',
             'nytimes': 'nytimes.com'
             }


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = 'tb_tabs'
            return [
                TestCase(
                    stdin='bloomberg.com\nexit',
                    attach='bloomberg.com',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='docs.python.org\nexit',
                    attach='docs.python.org',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    attach=None,
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='back\nexit',
                    attach='back',
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='bloomberg.com\ndocs.python.org\nbloomberg\nexit',
                    attach=('bloomberg.com', 'docs.python.org', 'bloomberg.com'),
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloomberg.com\ndocs.python.org\nback\nexit',
                    attach=('bloomberg.com', 'docs.python.org', 'docs.python.org'),
                    args=['tb_tabs']
                )
            ]

        def compare_pages(self, output_page, ideal_page):
            ideal_page = ideal_page.split('\n')
            for line in ideal_page:
                if line.strip() not in output_page:
                    return False, line.strip()
            return True, ""

        def _check_files(self, path_for_tabs: str, ideal_page: str, attach: str):
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param ideal_page: HTML code of the needed page
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            name = attach.split('.')[0]
            if name in filenames:
                print("found file: {}".format(name))
                with open(os.path.join(path_for_tabs, name), 'r', encoding='utf-8') as tab:
                    try:
                        content = tab.read()
                    except UnicodeDecodeError:
                        raise WrongAnswer('An error occurred while reading your saved tab. '
                                          'Perhaps you used the wrong encoding?')
                    is_page_saved_correctly, wrong_line = self.compare_pages(content, ideal_page)
                    if not is_page_saved_correctly:
                        raise WrongAnswer(f"The following line is missing from the file {name}:\n"
                                          f"\'{wrong_line}\'\n"
                                          f"Make sure you output the needed web page to the file\n"
                                          f"and save the file in the utf-8 encoding.")
            else:
                raise WrongAnswer(f"Couldn't find file with the name {name}.\n"
                                  f"Make sure you saved the tab and named it correctly.")

        @staticmethod
        def get_page(url):

            url = f'https://{url}'
            user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) " \
                         "Chrome/70.0.3538.77 Safari/537.36"
            try:
                page = requests.get(url, headers={'User-Agent': user_agent})
            except requests.exceptions.ConnectionError:
                raise WrongAnswer(f"An error occurred while tests tried to connect to the page {url}.\n"
                                  f"Please try again a bit later.")
            return page.text

        def check_correct_url(self, attach_0: str, path_for_tabs: str, reply):

            ideal_page = TextBasedBrowserTest.get_page(attach_0)
            self._check_files(path_for_tabs, ideal_page, attach_0)

            is_page_printed_correctly, wrong_line = self.compare_pages(reply, ideal_page)
            if not is_page_printed_correctly:
                raise CheckResult.wrong(f"The following line in missing from your console output:\n"
                                         f"\'{wrong_line}\'\n"
                                         f"Make sure you output the needed web page to the console.")

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if 'invalid url' in reply.lower():
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong('An invalid URL was input to your program.\n'
                                             'Your program should print \'Invalid URL\'.')

            if attach == 'back':
                if not reply:
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong(f'There should be no output. But your program printed: {reply}')

            # Correct URL
            path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

            if not os.path.isdir(path_for_tabs):
                return CheckResult.wrong("There is no directory for tabs")

            if isinstance(attach, str):
                attach_0 = attach
                self.check_correct_url(attach_0, path_for_tabs, reply)

            if isinstance(attach, tuple):
                for element in attach:
                    attach_0 = element
                    self.check_correct_url(attach_0, path_for_tabs, reply)

            try:
                shutil.rmtree(path_for_tabs)
            except PermissionError:
                return CheckResult.wrong("Impossible to remove the directory for tabs. \n"
                                         "Perhaps you haven't closed some file?")

            return CheckResult.correct()


    if __name__ == '__main__':
        TextBasedBrowserTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TextBasedBrowserTest

    if __name__ == '__main__':
        TextBasedBrowserTest().run_tests()
  learner_created: false
- name: storage.py
  visible: true
  text: |
    import os
    from typing import List


    class Storage:
        def __init__(self, folder: str):
            self.folder = folder
            os.makedirs(folder, exist_ok=True)

        def get_file_content(self, file_name: str) -> str:
            path = os.path.join(self.folder, file_name)
            if os.path.exists(path):
                with open(path, 'rt') as file:
                    return ''.join(file.readlines())
            return ''

        def save_content(self, file_name: str, content: str) -> str:
            """Saves the content into a file named file_name, without the suffix, returns the short name"""
            if not content:
                return ''
            short = file_name[:file_name.index('.')]
            full_name = os.path.join(self.folder, short)
            with open(full_name, 'w') as file:
                file.write(content)
            return short


    class Previous:
        def __init__(self):
            self._stack: List[str] = []

        def add(self, name: str):
            if name:
                self._stack.append(name)

        def pop(self) -> str:
            if len(self._stack) <= 1:
                return ''
            self._stack.pop()
            return self._stack[-1]
  learner_created: true
- name: request.py
  visible: true
  learner_created: true
- name: tb_tabs/docs
  visible: true
  learner_created: true
- name: tb_tabs/bloomberg
  visible: true
  learner_created: true
- name: utils.py
  visible: true
  text: |
    INVALID_URL = 'Invalid URL\n'


    class IOChecker:
        @staticmethod
        def is_url(url: str) -> bool:
            return not url.startswith('.') and '.' in url

        @staticmethod
        def is_short(name: str):
            return '.' not in name

        @staticmethod
        def print_content_or_error(content: str = ''):
            print(content if content else INVALID_URL)
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7213#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 26 Dec 2022 01:29:02 UTC"
record: 4
